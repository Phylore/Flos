"""Usermodell erweitert

Revision ID: d60eaf0fb785
Revises: 794a30e8f9a3
Create Date: 2025-05-29 17:12:07.557206

"""
from alembic import op
import sqlalchemy as sa
import datetime

# revision identifiers, used by Alembic.
revision = 'd60eaf0fb785'
down_revision = '794a30e8f9a3'
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - adjusted! ###
    with op.batch_alter_table('benutzer', schema=None) as batch_op:
        batch_op.add_column(sa.Column('email', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('aktiv', sa.Boolean(), nullable=False, server_default=sa.sql.expression.true()))
        batch_op.add_column(sa.Column('gesperrt', sa.Boolean(), nullable=False, server_default=sa.sql.expression.false()))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True, server_default=sa.text("'2025-05-29 17:12:07'")))  # static fallback
        batch_op.create_unique_constraint("uq_benutzer_email", ['email'])

    # Falls du server_default beim created_at lieber automatisch setzen willst, kannst du danach ggf. ein ALTER TABLE für die Default-Logik machen.
    # Aber für SQLite reicht das erstmal völlig aus.

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('benutzer', schema=None) as batch_op:
        batch_op.drop_constraint("uq_benutzer_email", type_='unique')
        batch_op.drop_column('created_at')
        batch_op.drop_column('gesperrt')
        batch_op.drop_column('aktiv')
        batch_op.drop_column('email')

